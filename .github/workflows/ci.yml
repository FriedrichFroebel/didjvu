name: CI

on:
- push
- pull_request

env:
  # Allow automated checks.
  BOOST_VERSION: 1.80.0
  BOOST_URL: https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.tar.gz

jobs:
  main:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          python: 3.8
          cc: gcc
          gamera: v4.0.0
        - os: ubuntu-latest
          python: 3.9
          cc: gcc
          gamera: v4.0.0
        - os: ubuntu-latest
          python: '3.10'
          cc: gcc
          gamera: v4.0.0
    runs-on: ${{ matrix.os }}
    name: Python ${{ matrix.python }} with Gamera ${{ matrix.gamera }}
    steps:
    - uses: actions/checkout@v2
    - name: set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: apt update
      run:
        sudo apt-get update
    - name: apt install deps
      run:
        sudo apt-get install
          djvulibre-bin
          docbook-xml
          docbook-xsl
          exiv2
          gir1.2-gexiv2-0.10
          libexempi[38]
          libpng-dev
          libtiff-dev
          libxml2-utils
          minidjvu
          xsltproc
    - name: set up CC and CXX env variables
      run: |
        echo "cc=${CC}" >> $GITHUB_ENV
        echo "cxx=${CC/cc/++}" >> $GITHUB_ENV
      env:
        CC: ${{ matrix.cc || 'gcc' }}
    - name: apt install GCC
      run:
        sudo apt-get install ${{ env.cc }} ${{ env.cxx }}
      if: ${{ matrix.cc }}
    - name: install ccache
      run: |
        sudo apt-get install ccache
        echo "/usr/lib/ccache:$PATH" >> $GITHUB_PATH
    - name: check ccache setup
      run: |
        command -v ${{env.cc}} | grep /ccache/
        command -v ${{env.cxx}} | grep /ccache/
    - name: restore ccache data
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key:
          ccache-${{ matrix.os }}-${{ env.cc }}-${{ matrix.gamera }}-py${{ matrix.python }}
        restore-keys:
          ccache-${{ matrix.os }}-${{ env.cc }}-${{ matrix.gamera }}-py${{ matrix.python }}
      if: ${{ matrix.gamera != 'master' }}
    - name: update PIP
      run:
        python -m pip install --upgrade pip
    - name: install wheel
      run:
        python -m pip install --upgrade wheel
    - name: download Gamera
      run: |
        url="https://github.com/hsnr-gamera/gamera-4/archive/${{ matrix.gamera }}.tar.gz"
        mkdir -p deps/
        wget "$url" -O deps/gamera-${{ matrix.gamera }}.tar.gz
    - name: unpack Gamera
      run: |
        cd deps/
        tar -xvzf gamera-*.tar.gz
    - name: build Gamera
      run: |
        cd deps/gamera-*/
        python setup.py --nowx build
      env:
        CC: ${{env.cc}}
        CXX: ${{env.cxx}}
    - name: install Gamera
      run: |
        cd deps/gamera-*/
        python setup.py --nowx install
    - name: remove Gamera source
      run:
        rm -rf deps
    - name: install package
      run: |
        python -m pip install .[dev,docs]
    - name: install python-xml-toolkit
      run:
        python -m pip install python-xmp-toolkit
    # `libboost-python-dev` cannot be used, as this only works with the Python version shipped by the system.
    # This means that for Ubuntu 20.04 each Python version different from 3.8 fails with something like
    # `cannot find -lboost_python39` when installing Boost.Python through the system package manager.
    # Based upon:
    #    * https://www.boost.org/doc/libs/release/libs/python/doc/html/building/installing_boost_python_on_your_.html
    #    * https://www.boost.org/doc/libs/release/more/getting_started/unix-variants.html
    - name: install Boost.Python
      run: |
        mkdir deps
        wget $BOOST_URL -O deps/boost.tar.gz
        cd deps
        tar -xvzf boost.tar.gz
        cd boost_*/
        ./bootstrap.sh --with-libraries=python
        sudo ./b2 install
        rm -rf deps
    - name: install py3exiv2
      run: |
        sudo apt-get install libexiv2-dev
        python -m pip install py3exiv2
    - name: set up PyGI
      run: |
        sudo apt-get install libgirepository1.0-dev
        python -m pip install pygobject
    - name: run tests
      run:
        make test
    - name: determine coverage
      run:
        make update-coverage
    - name: run flake8
      run:
        python -m flake8 .
    - name: check docs
      run:
        make -C doc check
    - name: build docs
      run:
        make -C doc all
    - name: check whether the executable was installed correctly
      run: |
        cd /
        which didjvu
        cat $(which didjvu)
        ls -l $(dirname $(which didjvu))/../lib/python${{ matrix.python }}/site-packages/didjvu/
        didjvu --version
        didjvu --help
    - name: install man page
      run:
        make install_manpage PREFIX=$HOME/.local
    - name: check whether the man page was installed correctly
      env:
        MANPATH: /home/runner/.local/share/man
        MANWIDTH: 80
      run: |
        cd /
        man 1 didjvu | grep -A 10 -w DIDJVU

# vim:ts=2 sts=2 sw=2 et
