from types import *
import LinearAlgebra
from . import pstat as pstat
from _typeshed import Incomplete

class Dispatch:
    def __init__(self, *tuples) -> None: ...
    def __call__(self, arg1, *args, **kw): ...

def lgeometricmean(inlist): ...
def lharmonicmean(inlist): ...
def lmean(inlist): ...
def lmedian(inlist, numbins: int = ...): ...
def lmedianscore(inlist): ...
def lmode(inlist): ...
def lmoment(inlist, moment: int = ...): ...
def lvariation(inlist): ...
def lskew(inlist): ...
def lkurtosis(inlist): ...
def ldescribe(inlist): ...
def litemfreq(inlist): ...
def lscoreatpercentile(inlist, percent): ...
def lpercentileofscore(inlist, score, histbins: int = ..., defaultlimits: Incomplete | None = ...): ...
def lhistogram(inlist, numbins: int = ..., defaultreallimits: Incomplete | None = ..., printextras: int = ...): ...
def lcumfreq(inlist, numbins: int = ..., defaultreallimits: Incomplete | None = ...): ...
def lrelfreq(inlist, numbins: int = ..., defaultreallimits: Incomplete | None = ...): ...
def lobrientransform(*args): ...
def lsamplevar(inlist): ...
def lsamplestdev(inlist): ...
def lcov(x, y, keepdims: int = ...): ...
def lvar(inlist): ...
def lstdev(inlist): ...
def lsterr(inlist): ...
def lsem(inlist): ...
def lz(inlist, score): ...
def lzs(inlist): ...
def ltrimboth(l, proportiontocut): ...
def ltrim1(l, proportiontocut, tail: str = ...): ...
def lpaired(x, y) -> None: ...
def lpearsonr(x, y): ...
def llincc(x, y): ...
def lspearmanr(x, y): ...
def lpointbiserialr(x, y): ...
def lkendalltau(x, y): ...
def llinregress(x, y): ...
def lttest_1samp(a, popmean, printit: int = ..., name: str = ..., writemode: str = ...): ...
def lttest_ind(a, b, printit: int = ..., name1: str = ..., name2: str = ..., writemode: str = ...): ...
def lttest_rel(a, b, printit: int = ..., name1: str = ..., name2: str = ..., writemode: str = ...): ...
def lchisquare(f_obs, f_exp: Incomplete | None = ...): ...
def lks_2samp(data1, data2): ...
def lmannwhitneyu(x, y): ...
def ltiecorrect(rankvals): ...
def lranksums(x, y): ...
def lwilcoxont(x, y): ...
def lkruskalwallish(*args): ...
def lfriedmanchisquare(*args): ...
def lchisqprob(chisq, df): ...
def lerfcc(x): ...
def lzprob(z): ...
def lksprob(alam): ...
def lfprob(dfnum, dfden, F): ...
def lbetacf(a, b, x): ...
def lgammln(xx): ...
def lbetai(a, b, x): ...
def lF_oneway(*lists): ...
def lF_value(ER, EF, dfnum, dfden): ...
def writecc(listoflists, file, writetype: str = ..., extra: int = ...) -> None: ...
def lincr(l, cap): ...
def lsum(inlist): ...
def lcumsum(inlist): ...
def lss(inlist): ...
def lsummult(list1, list2): ...
def lsumdiffsquared(x, y): ...
def lsquare_of_sums(inlist): ...
def lshellsort(inlist): ...
def lrankdata(inlist): ...
def outputpairedstats(fname, writemode, name1, n1, m1, se1, min1, max1, name2, n2, m2, se2, min2, max2, statname, stat, prob) -> None: ...
def lfindwithin(data): ...

geometricmean: Incomplete
harmonicmean: Incomplete
mean: Incomplete
median: Incomplete
medianscore: Incomplete
mode: Incomplete
moment: Incomplete
variation: Incomplete
skew: Incomplete
kurtosis: Incomplete
describe: Incomplete
itemfreq: Incomplete
scoreatpercentile: Incomplete
percentileofscore: Incomplete
histogram: Incomplete
cumfreq: Incomplete
relfreq: Incomplete
obrientransform: Incomplete
samplevar: Incomplete
samplestdev: Incomplete
var: Incomplete
stdev: Incomplete
sterr: Incomplete
sem: Incomplete
z: Incomplete
zs: Incomplete
trimboth: Incomplete
trim1: Incomplete
paired: Incomplete
pearsonr: Incomplete
spearmanr: Incomplete
pointbiserialr: Incomplete
kendalltau: Incomplete
linregress: Incomplete
ttest_1samp: Incomplete
ttest_ind: Incomplete
ttest_rel: Incomplete
chisquare: Incomplete
ks_2samp: Incomplete
mannwhitneyu: Incomplete
ranksums: Incomplete
tiecorrect: Incomplete
wilcoxont: Incomplete
kruskalwallish: Incomplete
friedmanchisquare: Incomplete
chisqprob: Incomplete
zprob: Incomplete
ksprob: Incomplete
fprob: Incomplete
betacf: Incomplete
betai: Incomplete
erfcc: Incomplete
gammln: Incomplete
F_oneway: Incomplete
F_value: Incomplete
incr: Incomplete
sum: Incomplete
cumsum: Incomplete
ss: Incomplete
summult: Incomplete
square_of_sums: Incomplete
sumdiffsquared: Incomplete
shellsort: Incomplete
rankdata: Incomplete
findwithin: Incomplete

def ageometricmean(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def aharmonicmean(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def amean(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def amedian(inarray, numbins: int = ...): ...
def amedianscore(inarray, dimension: Incomplete | None = ...): ...
def amode(a, dimension: Incomplete | None = ...): ...
def atmean(a, limits: Incomplete | None = ..., inclusive=...): ...
def atvar(a, limits: Incomplete | None = ..., inclusive=...): ...
def atmin(a, lowerlimit: Incomplete | None = ..., dimension: Incomplete | None = ..., inclusive: int = ...): ...
def atmax(a, upperlimit, dimension: Incomplete | None = ..., inclusive: int = ...): ...
def atstdev(a, limits: Incomplete | None = ..., inclusive=...): ...
def atsem(a, limits: Incomplete | None = ..., inclusive=...): ...
def amoment(a, moment: int = ..., dimension: Incomplete | None = ...): ...
def avariation(a, dimension: Incomplete | None = ...): ...
def askew(a, dimension: Incomplete | None = ...): ...
def akurtosis(a, dimension: Incomplete | None = ...): ...
def adescribe(inarray, dimension: Incomplete | None = ...): ...
def askewtest(a, dimension: Incomplete | None = ...): ...
def akurtosistest(a, dimension: Incomplete | None = ...): ...
def anormaltest(a, dimension: Incomplete | None = ...): ...
def aitemfreq(a): ...
def ascoreatpercentile(inarray, percent): ...
def apercentileofscore(inarray, score, histbins: int = ..., defaultlimits: Incomplete | None = ...): ...
def ahistogram(inarray, numbins: int = ..., defaultlimits: Incomplete | None = ..., printextras: int = ...): ...
def acumfreq(a, numbins: int = ..., defaultreallimits: Incomplete | None = ...): ...
def arelfreq(a, numbins: int = ..., defaultreallimits: Incomplete | None = ...): ...
def aobrientransform(*args): ...
def asamplevar(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def asamplestdev(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def asignaltonoise(instack, dimension: int = ...): ...
def acov(x, y, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def avar(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def astdev(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def asterr(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def asem(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def az(a, score): ...
def azs(a): ...
def azmap(scores, compare, dimension: int = ...): ...
def athreshold(a, threshmin: Incomplete | None = ..., threshmax: Incomplete | None = ..., newval: int = ...): ...
def atrimboth(a, proportiontocut): ...
def atrim1(a, proportiontocut, tail: str = ...): ...
def acovariance(X): ...
def acorrelation(X): ...
def apaired(x, y) -> None: ...
def dices(x, y): ...
def icc(x, y: Incomplete | None = ..., verbose: int = ...): ...
def alincc(x, y): ...
def apearsonr(x, y, verbose: int = ...): ...
def aspearmanr(x, y): ...
def apointbiserialr(x, y): ...
def akendalltau(x, y): ...
def alinregress(*args): ...
def amasslinregress(*args): ...
def attest_1samp(a, popmean, printit: int = ..., name: str = ..., writemode: str = ...): ...
def attest_ind(a, b, dimension: Incomplete | None = ..., printit: int = ..., name1: str = ..., name2: str = ..., writemode: str = ...): ...
def ap2t(pval, df): ...
def attest_rel(a, b, dimension: Incomplete | None = ..., printit: int = ..., name1: str = ..., name2: str = ..., writemode: str = ...): ...
def achisquare(f_obs, f_exp: Incomplete | None = ...): ...
def aks_2samp(data1, data2): ...
def amannwhitneyu(x, y): ...
def atiecorrect(rankvals): ...
def aranksums(x, y): ...
def awilcoxont(x, y): ...
def akruskalwallish(*args): ...
def afriedmanchisquare(*args): ...
def achisqprob(chisq, df): ...
def aerfcc(x): ...
def azprob(z): ...
def aksprob(alam): ...
def afprob(dfnum, dfden, F): ...
def abetacf(a, b, x, verbose: int = ...): ...
def agammln(xx): ...
def abetai(a, b, x, verbose: int = ...): ...
LA = LinearAlgebra

def aglm(data, para): ...
def aF_oneway(*args): ...
def aF_value(ER, EF, dfR, dfF): ...
def outputfstats(Enum, Eden, dfnum, dfden, f, prob) -> None: ...
def F_value_multivariate(ER, EF, dfnum, dfden): ...
def asign(a): ...
def asum(a, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def acumsum(a, dimension: Incomplete | None = ...): ...
def ass(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def asummult(array1, array2, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def asquare_of_sums(inarray, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def asumdiffsquared(a, b, dimension: Incomplete | None = ..., keepdims: int = ...): ...
def ashellsort(inarray): ...
def arankdata(inarray): ...
def afindwithin(data): ...

tmean: Incomplete
tvar: Incomplete
tstdev: Incomplete
tsem: Incomplete
skewtest: Incomplete
kurtosistest: Incomplete
normaltest: Incomplete
signaltonoise: Incomplete
threshold: Incomplete
lincc: Incomplete
