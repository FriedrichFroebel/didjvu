from types import *
from . import stats as stats
from _typeshed import Incomplete

def abut(source, *args): ...
def simpleabut(source, addon): ...
def colex(listoflists, cnums): ...
def collapse(listoflists, keepcols, collapsecols, fcn1: Incomplete | None = ..., fcn2: Incomplete | None = ..., cfcn: Incomplete | None = ...): ...
def dm(listoflists, criterion): ...
def flat(l): ...
def linexand(listoflists, columnlist, valuelist): ...
def linexor(listoflists, columnlist, valuelist): ...
def linedelimited(inlist, delimiter): ...
def lineincols(inlist, colsize): ...
def lineincustcols(inlist, colsizes): ...
def list2string(inlist, delimit: str = ...): ...
def makelol(inlist): ...
def makestr(x): ...
def printcc(lst, extra: int = ...) -> None: ...
def printincols(listoflists, colsize) -> None: ...
def pl(listoflists) -> None: ...
def printl(listoflists) -> None: ...
def replace(inlst, oldval, newval): ...
def recode(inlist, listmap, cols: Incomplete | None = ...): ...
def remap(listoflists, criterion): ...
def roundlist(inlist, digits): ...
def sortby(listoflists, sortcols): ...
def unique(inlist): ...
def duplicates(inlist): ...
def nonrepeats(inlist): ...
def aabut(source, *args): ...
def acolex(a, indices, axis: int = ...): ...
def acollapse(a, keepcols, collapsecols, fcn1: Incomplete | None = ..., fcn2: Incomplete | None = ..., cfcn: Incomplete | None = ...): ...
def adm(a, criterion): ...
def isstring(x): ...
def alinexand(a, columnlist, valuelist): ...
def alinexor(a, columnlist, valuelist): ...
def areplace(a, oldval, newval): ...
def arecode(a, listmap, col: str = ...): ...
def arowcompare(row1, row2): ...
def arowsame(row1, row2): ...
def asortrows(a, axis: int = ...): ...
def aunique(inarray): ...
def aduplicates(inarray): ...
