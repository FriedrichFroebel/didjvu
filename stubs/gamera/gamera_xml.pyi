from . import core as core, util as util
from .config import config as config
from .util import ProgressFactory as ProgressFactory, is_image_list as is_image_list, word_wrap as word_wrap
from _typeshed import Incomplete
from gamera.plugins import runlength as runlength
from gamera.symbol_table import SymbolTable as SymbolTable
from weakref import proxy as proxy

GAMERA_XML_FORMAT_VERSION: float

def classification_state_to_name(state): ...
def classification_state_to_number(state): ...

extensions: str

class XMLError(Exception): ...

class WriteXML:
    glyphs: Incomplete
    symbol_table: Incomplete
    with_features: Incomplete
    def __init__(self, glyphs: Incomplete | None = ..., symbol_table: Incomplete | None = ..., with_features: bool = ...) -> None: ...
    def write_filename(self, filename, with_features: Incomplete | None = ...) -> None: ...
    def string(self): ...
    def write_stream(self, stream: Incomplete | None = ...): ...

class WriteXMLFile(WriteXML):
    stream: Incomplete
    def write_stream(self, stream: Incomplete | None = ...): ...

class LoadXML:
    def __init__(self, parts: Incomplete | None = ...) -> None: ...
    def try_type_convert(self, dictionary, key, typename, tagname): ...
    def parse_filename(self, filename): ...
    def parse_string(self, s): ...
    def parse_stream(self, stream): ...
    def add_start_element_handler(self, name, func) -> None: ...
    def remove_start_element_handler(self, name) -> None: ...
    def add_end_element_handler(self, name, func) -> None: ...
    def remove_end_element_handler(self, name) -> None: ...
    def add_data(self, data) -> None: ...
    def add_property_value(self, data) -> None: ...

def glyphs_from_xml(filename, feature_functions: Incomplete | None = ...): ...
def glyphs_with_features_from_xml(filename, feature_functions: Incomplete | None = ...): ...
def glyphs_to_xml(filename, glyphs, with_features: bool = ...) -> None: ...

class StripTag:
    def __init__(self, input_filename, output_filename, tag_name) -> None: ...
    def open_input_file(self) -> None: ...
    def open_output_file(self) -> None: ...
    def parse(self) -> None: ...
    def start_element_handler(self, name, attributes) -> None: ...
    def end_element_handler(self, name) -> None: ...
    def default_handler(self, data) -> None: ...
    def excerpt(self) -> None: ...

def strip_features(input_filename, output_filename) -> None: ...
