from gamera.core import *
from gamera.gui.matplotlib_support import *
import wx
from _typeshed import Incomplete
from gamera import classify as classify, gamera_xml as gamera_xml, paths as paths, util as util
from gamera.gui import compat_wx as compat_wx, gamera_icons as gamera_icons, gui_util as gui_util, has_gui as has_gui, image_menu as image_menu, var_name as var_name

class IconDisplayDropTarget(wx.FileDropTarget, compat_wx.DropTarget):
    parent: Incomplete
    def __init__(self, parent) -> None: ...
    def OnDropFiles(self, x, y, filenames): ...

class IconDisplay(wx.ListCtrl):
    data: Incomplete
    locals: Incomplete
    modules: Incomplete
    main_win: Incomplete
    currentIcon: Incomplete
    currentIconName: Incomplete
    help_mode: int
    dt: Incomplete
    il: Incomplete
    classes: Incomplete
    def __init__(self, parent, main_win) -> None: ...
    def add_class(self, icon_description) -> None: ...
    def init_events(self) -> None: ...
    def add_icon(self, label, data, icon) -> None: ...
    def refresh_icon(self, key, klass, data, icon_num) -> None: ...
    def remove_icon(self, key) -> None: ...
    def update_icons(self, locals: Incomplete | None = ...) -> None: ...
    def find_icon(self, index): ...
    def OnItemSelected(self, event) -> None: ...
    def OnRightClick(self, event) -> None: ...
    def OnDoubleClick(self, event) -> None: ...
    def OnKeyPress(self, event) -> None: ...
    def OnMouseDown(self, event) -> None: ...

class CustomIcon:
    is_custom_icon_description: bool
    extra_methods: Incomplete
    label: Incomplete
    data: Incomplete
    index: Incomplete
    def __init__(self, label_, data_, index_) -> None: ...
    def register(cls) -> None: ...
    register: Incomplete
    def to_icon(bitmap): ...
    to_icon: Incomplete
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete
    def double_click(self): ...
    def right_click(self, parent, event, shell) -> None: ...
    def delete_key(self): ...
    def control_s(self): ...
    def drag(self) -> None: ...

class CIComplexImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIRGBImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIGreyScaleImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIGrey16Image(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIFloatImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIOneBitImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIRGBSubImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIGreyScaleSubImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIGrey16SubImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIFloatSubImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIOneBitSubImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIComplexSubImage(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CICC(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete

class CIImageList(CustomIcon):
    extra_methods: Incomplete
    def __init__(self, *args) -> None: ...
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete
    def glyphs_to_xml(self, event) -> None: ...
    def generate_features(self, event) -> None: ...
    def double_click(self): ...
    def control_s(self) -> None: ...

class CIInteractiveClassifier(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete
    def double_click(self): ...
    def right_click(self, *args) -> None: ...
    def control_s(self) -> None: ...

class CINonInteractiveClassifier(CustomIcon):
    def get_icon(): ...
    get_icon: Incomplete
    def check(data): ...
    check: Incomplete
    def double_click(self) -> None: ...
    def right_click(self, *args) -> None: ...
    def control_s(self) -> None: ...

class _CIVector(CustomIcon):
    def check(cls, data): ...
    check: Incomplete
    def double_click(self): ...
    def right_click(self, *args) -> None: ...
    def control_s(self) -> None: ...
    def drag(self): ...

class CIIntVector(_CIVector):
    typecode: str
    klass = int
    def get_icon(): ...
    get_icon: Incomplete

class CIFloatVector(_CIVector):
    typecode: str
    klass = float
    def get_icon(): ...
    get_icon: Incomplete

class CIComplexVector(_CIVector):
    typecode: Incomplete
    klass = complex
    def get_icon(): ...
    get_icon: Incomplete

builtin_icon_types: Incomplete
