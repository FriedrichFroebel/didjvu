from gamera.core import *
import wx.grid as gridlib
import wx
from _typeshed import Incomplete
from collections.abc import Generator
from gamera import plugin as plugin, util as util
from gamera.config import config as config
from gamera.gui import compat_wx as compat_wx, gui_util as gui_util, has_gui as has_gui, image_menu as image_menu, toolbar as toolbar, var_name as var_name

def cmp(x, y): ...

class ImageDisplay(wx.ScrolledWindow, util.CallbackObject):
    scaling: float
    scaling_quality: int
    view_function: Incomplete
    image: Incomplete
    original_image: Incomplete
    highlights: Incomplete
    boxed_highlights: int
    boxes: Incomplete
    rubber_on: int
    rubber_origin_x: Incomplete
    rubber_origin_y: int
    rubber_x2: int
    rubber_y2: int
    current_color: int
    dragging: int
    scroll_amount: int
    block_w: int
    block_h: int
    def __init__(self, parent, id: int = ..., size=...) -> None: ...
    def set_image(self, image, view_function: Incomplete | None = ..., weak: bool = ...): ...
    def reload_image(self, *args): ...
    def add_box(self, *args) -> None: ...
    def clear_all_boxes(self) -> None: ...
    def draw_box(self, box, dc: Incomplete | None = ...) -> None: ...
    def draw_boxes(self, dc: Incomplete | None = ...) -> None: ...
    def highlight_rectangle(self, r, color, text: Incomplete | None = ...) -> None: ...
    def highlight_cc(self, ccs, color: Incomplete | None = ...) -> None: ...
    highlight_ccs = highlight_cc
    def add_highlight_cc(self, ccs, color: Incomplete | None = ...) -> None: ...
    add_highlight_ccs = add_highlight_cc
    def unhighlight_cc(self, ccs) -> None: ...
    unhighlight_ccs = unhighlight_cc
    def clear_all_highlights(self) -> None: ...
    def focus_glyphs(self, glyphs) -> None: ...
    def focus_rect(self, rect) -> None: ...
    def focus_points(self, x1, y1, x2, y2, force: int = ...) -> None: ...
    def scale(self, new_scale: Incomplete | None = ...) -> None: ...
    def ZoomOut(self, *args) -> None: ...
    def ZoomNorm(self, *args) -> None: ...
    def ZoomIn(self, *args) -> None: ...
    def ZoomView(self, *args) -> None: ...
    def SetZoomType(self, type) -> None: ...
    def draw_rubber(self, dc: Incomplete | None = ..., clear: bool = ...) -> None: ...
    def PaintArea(self, x1, y1, x2, y2, check: bool = ..., dc: Incomplete | None = ..., tmpdc: Incomplete | None = ...) -> None: ...
    def PaintAreaRect(self, rect) -> None: ...
    def RefreshAll(self) -> None: ...

class ImageWindow(wx.Panel):
    id: Incomplete
    toolbar: Incomplete
    zoom_slider: Incomplete
    def __init__(self, parent: Incomplete | None = ..., id: int = ...) -> None: ...
    def get_display(self): ...

GridCellRenderer: Incomplete

class MultiImageGridRenderer(GridCellRenderer):
    parent: Incomplete
    label_font: Incomplete
    def __init__(self, parent) -> None: ...
    def Draw(self, grid, attr, dc, rect, row, col, isSelected) -> None: ...
    def GetBestSize(self, grid, attr, dc, row, col): ...
    def Clone(self): ...

class MultiImageDisplay(gridlib.Grid):
    renderer: Incomplete
    glyphs: Incomplete
    sorted_glyphs: Incomplete
    rows: int
    cols: Incomplete
    max_cell_width: Incomplete
    max_cell_height: Incomplete
    max_label_length: Incomplete
    cell_padding: Incomplete
    frame: Incomplete
    updating: bool
    sort_function: str
    sort_order: int
    display_attribute: str
    display_names: bool
    created: bool
    do_updates: bool
    last_tooltip: str
    scaling: float
    tooltip: Incomplete
    def __init__(self, parent: Incomplete | None = ..., id: int = ...) -> None: ...
    def AutoSize(self) -> None: ...
    def get_is_dirty(self): ...
    def set_is_dirty(self, value) -> None: ...
    is_dirty: Incomplete
    def set_image(self, list, view_function: Incomplete | None = ...): ...
    def resize_grid(self, do_auto_size: bool = ...) -> None: ...
    def append_glyphs(self, glyphs, resize: bool = ...) -> None: ...
    def remove_glyphs(self, list, resize: bool = ...) -> None: ...
    def append_and_remove_glyphs(self, add, remove) -> None: ...
    def scale(self, scaling) -> None: ...
    def get_glyphs(self): ...
    last_sort: str
    display_row_labels: int
    def default_sort(self, _list): ...
    def sort_images(self, function: Incomplete | None = ..., order: int = ...) -> None: ...
    def set_labels(self): ...
    def select_images(self, function) -> None: ...
    def get_image_no(self, row, col): ...
    def GetAllItems(self): ...
    def GetSelectedCoords(self, row: Incomplete | None = ..., col: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def GetSelectedValidImages(self, row: Incomplete | None = ..., col: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def GetSelectedIndices(self, row: Incomplete | None = ..., col: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def GetSelectedItems(self, row: Incomplete | None = ..., col: Incomplete | None = ...): ...
    def RefreshSelected(self, row: Incomplete | None = ..., col: Incomplete | None = ...) -> None: ...
    def SelectGlyphs(self, glyphs) -> None: ...
    def ZoomOut(self) -> None: ...
    def ZoomNorm(self) -> None: ...
    def ZoomIn(self) -> None: ...
    def get_label(self, glyph): ...
    def reduce_label_length(self, dc, width, label): ...
    def set_tooltip(self, label) -> None: ...
    def display_label_at_cell(self, row, col, label) -> None: ...

class MultiImageWindow(wx.Panel):
    toolbar: Incomplete
    display_text_combo: Incomplete
    toolbar2: Incomplete
    sort_combo: Incomplete
    select_combo: Incomplete
    select_choices: Incomplete
    sort_choices: Incomplete
    id: Incomplete
    box_sizer: Incomplete
    def __init__(self, parent: Incomplete | None = ..., id: int = ..., title: str = ..., owner: Incomplete | None = ...) -> None: ...
    def get_display(self): ...
    display_choices: Incomplete
    def set_choices(self) -> None: ...
    def close(self) -> None: ...

class ImageFrameBase:
    owner: Incomplete
    def __init__(self, parent: Incomplete | None = ..., id: int = ..., title: str = ..., owner: Incomplete | None = ...) -> None: ...
    def add_callback(self, *args) -> None: ...
    def remove_callback(self, *args) -> None: ...
    def trigger_callback(self, *args) -> None: ...
    def set_image(self, image, view_function: Incomplete | None = ..., weak: int = ...) -> None: ...
    def close(self) -> None: ...
    def refresh(self) -> None: ...
    def Show(self, flag: int = ...) -> None: ...
    show = Show

class ImageFrame(ImageFrameBase):
    def __init__(self, parent: Incomplete | None = ..., id: int = ..., title: str = ..., owner: Incomplete | None = ...) -> None: ...
    def add_highlight_cc(self, cc, color: Incomplete | None = ...) -> None: ...
    add_highlight_ccs = add_highlight_cc
    def highlight_rectangle(self, *args) -> None: ...
    def add_box(self, *args) -> None: ...
    def clear_all_boxes(self) -> None: ...
    def highlight_cc(self, cc) -> None: ...
    highlight_ccs = highlight_cc
    def unhighlight_cc(self, cc) -> None: ...
    unhighlight_ccs = unhighlight_cc
    def clear_all_highlights(self) -> None: ...
    def focus_glyphs(self, glyphs) -> None: ...

class MultiImageFrame(ImageFrameBase):
    def __init__(self, parent: Incomplete | None = ..., id: int = ..., title: str = ..., owner: Incomplete | None = ...) -> None: ...
    def set_image(self, image, view_function: Incomplete | None = ...) -> None: ...

def graph_horiz(data, dc, x1, y1, x2, y2, mark: Incomplete | None = ..., border: int = ...) -> None: ...
def graph_vert(data, dc, x1, y1, x2, y2, mark: Incomplete | None = ..., border: int = ...) -> None: ...
def graph_scale(dc, x1, y1, x2, y2) -> None: ...
def clear_dc(dc) -> None: ...

HISTOGRAM_PAD: int

class HistogramDisplay(wx.Frame):
    data: Incomplete
    mark: Incomplete
    def __init__(self, data: Incomplete | None = ..., mark: Incomplete | None = ..., parent: Incomplete | None = ..., title: str = ...) -> None: ...

class ProjectionsDisplay(wx.Frame):
    x_data: Incomplete
    y_data: Incomplete
    image: Incomplete
    def __init__(self, x_data: Incomplete | None = ..., y_data: Incomplete | None = ..., image: Incomplete | None = ..., parent: Incomplete | None = ..., title: str = ...) -> None: ...

class ProjectionDisplay(wx.Frame):
    data: Incomplete
    def __init__(self, data, title: str = ...) -> None: ...

class GameraPrintout(wx.Printout):
    margin: Incomplete
    image: Incomplete
    def __init__(self, image, margin: float = ...) -> None: ...
    def HasPage(self, page): ...
    def GetPageInfo(self): ...
    def OnPrintPage(self, page): ...
