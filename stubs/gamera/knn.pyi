from threading import *
import gamera.gamera_xml
from _typeshed import Incomplete
from gamera import classify as classify, config as config, core as core, util as util
from gamera.knncore import CITY_BLOCK as CITY_BLOCK, EUCLIDEAN as EUCLIDEAN, FAST_EUCLIDEAN as FAST_EUCLIDEAN

KNN_XML_FORMAT_VERSION: float

class _KnnLoadXML(gamera.gamera_xml.LoadXML):
    def __init__(self) -> None: ...

class _kNNBase(gamera.knncore.kNN):
    num_features: Incomplete
    num_k: Incomplete
    normalize: Incomplete
    def __init__(self, num_features: int = ..., num_k: int = ..., normalize: bool = ...) -> None: ...
    def __del__(self) -> None: ...
    def distance_from_images(self, images, glyph, max: Incomplete | None = ...): ...
    def distance_between_images(self, imagea, imageb): ...
    def distance_matrix(self, images, normalize: bool = ...): ...
    def unique_distances(self, images, normalize: bool = ...): ...
    def evaluate(self): ...
    def knndistance_statistics(self, k: int = ...): ...
    def settings_dialog(self, parent) -> None: ...
    def save_settings(self, filename) -> None: ...
    distance_type: Incomplete
    def load_settings(self, filename) -> None: ...
    def serialize(self, filename) -> None: ...
    def unserialize(self, filename) -> None: ...
    def generate_features(self, glyph) -> None: ...
    def get_selections_by_features(self): ...
    def get_selections_by_feature(self, feature_name): ...
    def get_weights_by_features(self): ...
    def get_weights_by_feature(self, feature_name): ...
    def set_selections_by_features(self, values) -> None: ...
    def set_selections_by_feature(self, feature_name, values) -> None: ...
    def set_weights_by_features(self, values) -> None: ...
    def set_weights_by_feature(self, feature_name, values) -> None: ...

class kNNInteractive(_kNNBase, classify.InteractiveClassifier):
    features: Incomplete
    feature_functions: Incomplete
    def __init__(self, database=..., features: str = ..., perform_splits: int = ..., num_k: int = ...) -> None: ...
    def __del__(self) -> None: ...
    def noninteractive_copy(self): ...
    def supports_optimization(self): ...
    num_features: Incomplete
    is_dirty: bool
    def change_feature_set(self, f) -> None: ...

class kNNNonInteractive(_kNNBase, classify.NonInteractiveClassifier):
    features: Incomplete
    feature_functions: Incomplete
    def __init__(self, database=..., features: str = ..., perform_splits: bool = ..., num_k: int = ..., normalize: bool = ...) -> None: ...
    def __del__(self) -> None: ...
    num_features: Incomplete
    is_dirty: bool
    def change_feature_set(self, f) -> None: ...
    normalize: Incomplete
    def set_normalization_state(self, flag) -> None: ...
    def get_normalization_state(self): ...

def simple_feature_selector(glyphs): ...

class CombGen:
    k: Incomplete
    seq: Incomplete
    indices: Incomplete
    def __init__(self, seq, k) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

def get_glyphs_stats(glyphs): ...
def comma_delim_stats(glyphs, filename) -> None: ...
def glyphs_by_category(glyphs): ...
