from types import *
import gamera.gameracore as gameracore
from . import paths as paths, util as util
from .config import config as config
from .enums import ALL as ALL, NONIMAGE as NONIMAGE
from _typeshed import Incomplete
from array import array as array
from gamera.gameracore import AUTOMATIC as AUTOMATIC, COMPLEX as COMPLEX, CONFIDENCE_AVGDISTANCE as CONFIDENCE_AVGDISTANCE, CONFIDENCE_DEFAULT as CONFIDENCE_DEFAULT, CONFIDENCE_INVERSEWEIGHT as CONFIDENCE_INVERSEWEIGHT, CONFIDENCE_KNNFRACTION as CONFIDENCE_KNNFRACTION, CONFIDENCE_LINEARWEIGHT as CONFIDENCE_LINEARWEIGHT, CONFIDENCE_NNDISTANCE as CONFIDENCE_NNDISTANCE, CONFIDENCE_NUN as CONFIDENCE_NUN, DENSE as DENSE, Dim as Dim, FLOAT as FLOAT, FloatPoint as FloatPoint, GREY16 as GREY16, GREYSCALE as GREYSCALE, HEURISTIC as HEURISTIC, ImageData as ImageData, ImageInfo as ImageInfo, MANUAL as MANUAL, ONEBIT as ONEBIT, Point as Point, RGB as RGB, RGBPixel as RGBPixel, RLE as RLE, Rect as Rect, Region as Region, RegionMap as RegionMap, Size as Size, UNCLASSIFIED as UNCLASSIFIED
from gamera.gui import has_gui as has_gui

class SegmentationError(Exception): ...

def load_image(filename, compression=...): ...
def save_image(image, filename) -> None: ...
def nested_list_to_image(l, t: int = ...): ...
def image_info(filename): ...
def display_multi(list): ...

all_features: Incomplete

class ImageBase:
    methods: Incomplete
    class Properties(dict):
        def __getitem__(self, attr): ...
        def __getattr__(self, attr): ...
        def __setattr__(self, attr, value): ...
    name: str
    last_display: Incomplete
    properties: Incomplete
    feature_functions: Incomplete
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    def pixel_type_name(self): ...
    pixel_type_name: Incomplete
    def storage_format_name(self): ...
    storage_format_name: Incomplete
    def load_image(filename, compression=...): ...
    load_image: Incomplete
    def save_image(self, filename): ...
    def memory_size(self): ...
    memory_size: Incomplete
    def set_display(self, _display) -> None: ...
    def display(self, title: Incomplete | None = ...): ...
    def display_ccs(self): ...
    def display_false_color(self): ...
    id_name: Incomplete
    confidence: Incomplete
    classification_state: Incomplete
    def unclassify(self) -> None: ...
    def classify_manual(self, id_name) -> None: ...
    def classify_automatic(self, id_name) -> None: ...
    def classify_heuristic(self, id_name) -> None: ...
    def get_main_id(self): ...
    def get_confidence(self, confidence_type: Incomplete | None = ...): ...
    def has_id_name(self, name): ...
    def subimage(self, *args, **kwargs): ...
    def get_feature_functions(cls, features: str = ...): ...
    get_feature_functions: Incomplete
    def to_xml(self, stream: Incomplete | None = ...): ...
    def to_xml_filename(self, filename): ...
    def set_property(self, name, value) -> None: ...
    def get_property(self, name): ...

class Image(gameracore.Image, ImageBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __gt__(self, other): ...
    def __hash__(self): ...

class SubImage(gameracore.SubImage, ImageBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self) -> None: ...

class Cc(gameracore.Cc, ImageBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self) -> None: ...
    def __eq__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __hash__(self): ...
    last_display: str
    def display_context(self) -> None: ...

class MlCc(gameracore.MlCc, ImageBase):
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self) -> None: ...

init_gamera: Incomplete
