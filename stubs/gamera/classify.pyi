from . import core as core, gamera_xml as gamera_xml, util as util
from .fudge import Fudge as Fudge
from _typeshed import Incomplete
from gamera.gameracore import CONFIDENCE_DEFAULT as CONFIDENCE_DEFAULT
from gamera.gui import has_gui as has_gui

class ClassifierError(Exception): ...

class _Classifier:
    def get_name(self): ...
    def is_dirty(self): ...
    is_dirty: Incomplete
    def get_database(self): ...
    def set_database(self, other) -> None: ...
    database: Incomplete
    def __len__(self) -> int: ...
    def group_list_automatic(self, glyphs, grouping_function: Incomplete | None = ..., evaluate_function: Incomplete | None = ..., max_parts_per_group: int = ..., max_graph_size: int = ..., criterion: str = ...): ...
    def group_and_update_list_automatic(self, glyphs, *args, **kwargs): ...
    def classify_glyph_automatic(self, glyph, max_recursion: int = ..., recursion_level: int = ...): ...
    def classify_list_automatic(self, glyphs, max_recursion: int = ..., progress: Incomplete | None = ...): ...
    def classify_and_update_list_automatic(self, glyphs, *args, **kwargs): ...
    def to_xml(self, stream, with_features: bool = ...): ...
    def to_xml_filename(self, filename, with_features: bool = ...): ...
    def from_xml(self, stream) -> None: ...
    def from_xml_filename(self, filename) -> None: ...
    def merge_from_xml(self, stream) -> None: ...
    def merge_from_xml_filename(self, filename) -> None: ...
    def generate_features_on_glyphs(self, glyphs) -> None: ...

class NonInteractiveClassifier(_Classifier):
    confidence_types: Incomplete
    def __init__(self, database=..., perform_splits: bool = ...) -> None: ...
    def __del__(self) -> None: ...
    def is_interactive(): ...
    is_interactive: Incomplete
    def get_glyphs(self): ...
    def set_glyphs(self, glyphs) -> None: ...
    def merge_glyphs(self, glyphs) -> None: ...
    def clear_glyphs(self) -> None: ...
    def load_settings(self, filename) -> None: ...
    def guess_glyph_automatic(self, glyph): ...

class InteractiveClassifier(_Classifier):
    confidence_types: Incomplete
    def __init__(self, database=..., perform_splits: bool = ...) -> None: ...
    def __del__(self) -> None: ...
    def is_interactive(): ...
    is_interactive: Incomplete
    def get_glyphs(self): ...
    def set_glyphs(self, glyphs) -> None: ...
    def merge_glyphs(self, glyphs) -> None: ...
    def clear_glyphs(self) -> None: ...
    def guess_glyph_automatic(self, glyph): ...
    def classify_glyph_manual(self, glyph, id): ...
    def classify_list_manual(self, glyphs, id): ...
    def classify_and_update_list_manual(self, glyphs, *args, **kwargs): ...
    def add_to_database(self, glyphs) -> None: ...
    def remove_from_database(self, glyphs) -> None: ...
    def display(self, current_database=..., context_image: Incomplete | None = ..., symbol_table=...): ...
    def set_display(self, display) -> None: ...

class BasicGroupingFunction:
    def __init__(self, threshold) -> None: ...
    def __call__(self, a, b): ...

class ShapedGroupingFunction:
    def __init__(self, threshold) -> None: ...
    def __call__(self, a, b): ...

class BoundingBoxGroupingFunction:
    def __init__(self, threshold) -> None: ...
    def __call__(self, a, b): ...

def average_bb_distance(ccs): ...
